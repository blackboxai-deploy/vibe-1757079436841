from fastapi import FastAPI, HTTPException, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
import httpx
import sqlite3
import json
import os
from datetime import datetime, timedelta
import jwt
from typing import Optional, List
import asyncio
from contextlib import asynccontextmanager
import uvicorn

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs("backend", exist_ok=True)

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    init_database()
    print("üöÄ Dark Paradise API –∑–∞–ø—É—â–µ–Ω!")
    yield
    # Shutdown
    print("üõë Dark Paradise API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

app = FastAPI(
    title="Dark Paradise SCP:SL API",
    description="API –¥–ª—è —Å–µ—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ Dark Paradise",
    version="1.0.0",
    lifespan=lifespan
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

security = HTTPBearer()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
JWT_SECRET = "dark_paradise_secret_key_2024"
JWT_ALGORITHM = "HS256"

DISCORD_CLIENT_ID = "YOUR_DISCORD_CLIENT_ID"
DISCORD_CLIENT_SECRET = "YOUR_DISCORD_CLIENT_SECRET"
DISCORD_REDIRECT_URI = "http://localhost:3000/api/auth/discord/callback"

YOOKASSA_SHOP_ID = "YOUR_YOOKASSA_SHOP_ID"
YOOKASSA_SECRET_KEY = "YOUR_YOOKASSA_SECRET_KEY"

STEAM_API_KEY = "AEE99372C058CCF76EFD4D71C028FBBD"

# –î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
SERVERS_CONFIG = {
    "server1": {
        "name": "Dark Paradise | Vanilla",
        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º SCP:SL –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π. –ü–æ–ª–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –§–æ–Ω–¥–∞ SCP.",
        "api_url": "https://api.scplist.kr/api/servers/79084",
        "max_players": 25,
        "server_type": "vanilla"
    },
    "server2": {
        "name": "Dark Paradise | Only Events", 
        "description": "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∏–≥—Ä—ã. –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç–≤–µ–Ω—Ç—ã.",
        "api_url": "https://api.scplist.kr/api/servers/80810",
        "max_players": 30,
        "server_type": "events"
    }
}

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('backend/dark_paradise.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            discord_id VARCHAR(50) UNIQUE NOT NULL,
            username VARCHAR(100) NOT NULL,
            discriminator VARCHAR(10),
            avatar VARCHAR(200),
            steam_id VARCHAR(50),
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫—É–ø–æ–∫
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS purchases (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            item_name VARCHAR(100) NOT NULL,
            item_description TEXT,
            price DECIMAL(10,2) NOT NULL,
            currency VARCHAR(3) DEFAULT 'RUB',
            status VARCHAR(20) DEFAULT 'pending',
            payment_id VARCHAR(100),
            yookassa_payment_id VARCHAR(100),
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            completed_at DATETIME,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS shop_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name VARCHAR(100) NOT NULL,
            description TEXT,
            price DECIMAL(10,2) NOT NULL,
            currency VARCHAR(3) DEFAULT 'RUB',
            category VARCHAR(50),
            image_url VARCHAR(200),
            is_active BOOLEAN DEFAULT 1,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS server_stats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            server_key VARCHAR(20) NOT NULL,
            players_count INTEGER NOT NULL,
            is_online BOOLEAN NOT NULL,
            recorded_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    cursor.execute('SELECT COUNT(*) FROM shop_items')
    if cursor.fetchone()[0] == 0:
        default_items = [
            ("VIP Status (30 –¥–Ω–µ–π)", "–ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å –æ—Å–æ–±—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –≤ –∏–≥—Ä–µ", 299.00, "RUB", "vip", None),
            ("Premium Kit", "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã", 199.00, "RUB", "items", None),
            ("Server Priority", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º", 99.00, "RUB", "access", None),
            ("Custom Badge", "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–ª–∞—à–∫–∞ –≤ –∏–≥—Ä–µ", 149.00, "RUB", "cosmetic", None),
            ("Event Access", "–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —ç–≤–µ–Ω—Ç–∞–º –Ω–∞ –º–µ—Å—è—Ü", 249.00, "RUB", "events", None)
        ]
        cursor.executemany('''
            INSERT INTO shop_items (name, description, price, currency, category, image_url)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', default_items)
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")

async def get_players_count(api_url: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤ —Å API"""
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(api_url)
            if response.status_code == 200:
                data = response.json()
                return {
                    "players": data.get("players", 0),
                    "max_players": data.get("maxPlayers", 0),
                    "is_online": True,
                    "last_updated": datetime.now().isoformat()
                }
            else:
                return {"players": 0, "max_players": 0, "is_online": False, "error": "API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞ {api_url}: {e}")
        return {"players": 0, "max_players": 0, "is_online": False, "error": str(e)}

@app.get("/")
async def root():
    return {
        "message": "Dark Paradise SCP:SL API", 
        "version": "1.0.0",
        "status": "active",
        "timestamp": datetime.now().isoformat()
    }

@app.get("/api/servers")
async def get_all_servers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    servers_data = {}
    
    for server_key, config in SERVERS_CONFIG.items():
        server_stats = await get_players_count(config["api_url"])
        servers_data[server_key] = {
            "name": config["name"],
            "description": config["description"],
            "server_type": config["server_type"],
            "max_players": config["max_players"],
            **server_stats
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
        try:
            conn = sqlite3.connect('backend/dark_paradise.db')
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO server_stats (server_key, players_count, is_online)
                VALUES (?, ?, ?)
            ''', (server_key, server_stats["players"], server_stats["is_online"]))
            conn.commit()
            conn.close()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    return {"servers": servers_data}

@app.get("/api/server/{server_key}")
async def get_server_info(server_key: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
    if server_key not in SERVERS_CONFIG:
        raise HTTPException(status_code=404, detail="–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    config = SERVERS_CONFIG[server_key]
    server_stats = await get_players_count(config["api_url"])
    
    return {
        "name": config["name"],
        "description": config["description"],
        "server_type": config["server_type"],
        "max_players": config["max_players"],
        **server_stats
    }

@app.get("/api/steam-nickname/{steam_id}")
async def get_steam_nickname(steam_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ Steam –ø–æ Steam ID"""
    try:
        url = f"https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key={STEAM_API_KEY}&steamids={steam_id}"
        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            data = response.json()
            
            if data.get("response", {}).get("players"):
                player = data["response"]["players"][0]
                return {"nickname": player.get("personaname", "Unknown")}
            else:
                raise HTTPException(status_code=404, detail="–ü—Ä–æ—Ñ–∏–ª—å Steam –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ Steam API: {str(e)}")

@app.get("/api/shop/items")
async def get_shop_items():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞"""
    try:
        conn = sqlite3.connect('backend/dark_paradise.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT id, name, description, price, currency, category, image_url 
            FROM shop_items 
            WHERE is_active = 1
            ORDER BY category, price
        ''')
        items = cursor.fetchall()
        conn.close()
        
        return {
            "items": [
                {
                    "id": item[0],
                    "name": item[1],
                    "description": item[2],
                    "price": float(item[3]),
                    "currency": item[4],
                    "category": item[5],
                    "image_url": item[6]
                }
                for item in items
            ]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}")

@app.post("/api/auth/discord")
async def discord_auth(request: Request):
    """Discord OAuth –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Discord OAuth
    return {
        "message": "Discord auth endpoint",
        "note": "–¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Discord OAuth credentials"
    }

@app.post("/api/payment/create")
async def create_payment(request: Request):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa (–∑–∞–≥–ª—É—à–∫–∞)"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ÆKassa
    return {
        "message": "Payment creation endpoint", 
        "note": "–¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa credentials"
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "database": "connected",
        "servers": list(SERVERS_CONFIG.keys())
    }

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)